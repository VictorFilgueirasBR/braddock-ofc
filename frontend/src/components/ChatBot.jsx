import React, { useState, useEffect } from "react";
import axios from "axios";
import { v4 as uuidv4 } from "uuid";
import "../styles/Chatbot.css";

const ChatBot = () => {
Â  const [messages, setMessages] = useState([
Â  Â  { sender: "bot", text: "OlÃ¡ ðŸ‘‹ Sou seu assistente virtual. Como posso ajudar?" },
Â  ]);
Â  const [inputValue, setInputValue] = useState("");
Â  const [loading, setLoading] = useState(false);
Â  const [sessionId, setSessionId] = useState(null);

Â  useEffect(() => {
Â  Â  setSessionId(uuidv4());
Â  }, []);

Â  const sendMessage = async (message) => {
Â  Â  if (!message.trim()) return;

Â  Â  setMessages((prev) => [...prev, { sender: "user", text: message }]);
Â  Â  setLoading(true);
Â  Â  setInputValue("");

Â  Â  try {
Â  Â  Â  // CorreÃ§Ã£o: Usando a URL fixa do backend para evitar o erro de localhost
Â  Â  Â  const response = await axios.post(
Â  Â  Â  Â  "http://184.72.200.29:5000/api/chat", // URL corrigida
Â  Â  Â  Â  { question: message, sessionId }
Â  Â  Â  );

Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  setMessages((prev) => [
Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  { sender: "bot", text: response.data.answer },
Â  Â  Â  Â  Â  ...(response.data.showCTAButton
Â  Â  Â  Â  Â  Â  ? [{
Â  Â  Â  Â  Â  Â  Â  Â  sender: "bot",
Â  Â  Â  Â  Â  Â  Â  Â  isButton: true,
Â  Â  Â  Â  Â  Â  Â  Â  text: "WhatsApp",
Â  Â  Â  Â  Â  Â  Â  Â  link: "https://wa.me/5521965486862"
Â  Â  Â  Â  Â  Â  Â  }]
Â  Â  Â  Â  Â  Â  : [])
Â  Â  Â  Â  ]);
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }, 2000);
Â  Â  } catch (error) {
Â  Â  Â  console.error("Erro na comunicaÃ§Ã£o com a API:", error);
Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  setMessages((prev) => [
Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  { sender: "bot", text: "Desculpe, ocorreu um erro. Tente novamente." },
Â  Â  Â  Â  ]);
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }, 2000);
Â  Â  }
Â  };

Â  const handleSend = () => {
Â  Â  sendMessage(inputValue);
Â  };

Â  const handleKeyDown = (e) => {
Â  Â  if (e.key === "Enter") {
Â  Â  Â  handleSend();
Â  Â  }
Â  };

Â  return (
Â  Â  <div className="chatbot-container">
Â  Â  Â  <div className="messages-list">
Â  Â  Â  Â  {messages.map((msg, index) => (
Â  Â  Â  Â  Â  <div key={index} className={`message ${msg.sender}`}>
Â  Â  Â  Â  Â  Â  {msg.isButton ? (
Â  Â  Â  Â  Â  Â  Â  <a href={msg.link} target="_blank" rel="noopener noreferrer" className="cta-button">
Â  Â  Â  Â  Â  Â  Â  Â  {msg.text}
Â  Â  Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <p>{msg.text}</p>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  ))}
Â  Â  Â  Â  {loading && <div className="message bot loading-dots"><div></div><div></div><div></div></div>}
Â  Â  Â  </div>
Â  Â  Â  <div className="input-area">
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  value={inputValue}
Â  Â  Â  Â  Â  onChange={(e) => setInputValue(e.target.value)}
Â  Â  Â  Â  Â  onKeyDown={handleKeyDown}
Â  Â  Â  Â  Â  placeholder="Converse com Braddock IA..."
Â  Â  Â  Â  />
Â  Â  Â  Â  <button onClick={handleSend} disabled={loading}>
Â  Â  Â  Â  Â  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
Â  Â  Â  Â  Â  Â  <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" stroke="#fff" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default ChatBot;
